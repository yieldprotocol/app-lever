/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace YieldNotionalLever {
  export type IlkInfoStruct = {
    join: string;
    maturity: BigNumberish;
    currencyId: BigNumberish;
  };

  export type IlkInfoStructOutput = [string, number, number] & {
    join: string;
    maturity: number;
    currencyId: number;
  };
}

export interface NotionalLeverInterface extends utils.Interface {
  contractName: "NotionalLever";
  functions: {
    "FLASH_LOAN_RETURN()": FunctionFragment;
    "approveFyToken(bytes6)": FunctionFragment;
    "approveJoin(address)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "divest(bytes6,bytes6,bytes12,uint128,uint128,uint256)": FunctionFragment;
    "giver()": FunctionFragment;
    "ilkInfo(bytes6)": FunctionFragment;
    "invest(bytes6,bytes6,uint128,uint128)": FunctionFragment;
    "ladle()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setIlkInfo(bytes6,(address,uint40,uint16))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FLASH_LOAN_RETURN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveFyToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "approveJoin", values: [string]): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "divest",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "giver", values?: undefined): string;
  encodeFunctionData(functionFragment: "ilkInfo", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIlkInfo",
    values: [BytesLike, YieldNotionalLever.IlkInfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "FLASH_LOAN_RETURN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveFyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "giver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilkInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIlkInfo", data: BytesLike): Result;

  events: {};
}

export interface NotionalLever extends BaseContract {
  contractName: "NotionalLever";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NotionalLeverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<[string]>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveJoin(
      joinAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    divest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    giver(overrides?: CallOverrides): Promise<[string]>;

    ilkInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        join: string;
        maturity: number;
        currencyId: number;
      }
    >;

    invest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      baseAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIlkInfo(
      ilkId: BytesLike,
      underlying: YieldNotionalLever.IlkInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<string>;

  approveFyToken(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveJoin(
    joinAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  divest(
    ilkId: BytesLike,
    seriesId: BytesLike,
    vaultId: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    minOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  giver(overrides?: CallOverrides): Promise<string>;

  ilkInfo(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      join: string;
      maturity: number;
      currencyId: number;
    }
  >;

  invest(
    ilkId: BytesLike,
    seriesId: BytesLike,
    baseAmount: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ladle(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onFlashLoan(
    initiator: string,
    arg1: string,
    borrowAmount: BigNumberish,
    fee: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIlkInfo(
    ilkId: BytesLike,
    underlying: YieldNotionalLever.IlkInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<string>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approveJoin(joinAddress: string, overrides?: CallOverrides): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    divest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    giver(overrides?: CallOverrides): Promise<string>;

    ilkInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        join: string;
        maturity: number;
        currencyId: number;
      }
    >;

    invest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      baseAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ladle(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setIlkInfo(
      ilkId: BytesLike,
      underlying: YieldNotionalLever.IlkInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<BigNumber>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveJoin(
      joinAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    divest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    giver(overrides?: CallOverrides): Promise<BigNumber>;

    ilkInfo(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      baseAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIlkInfo(
      ilkId: BytesLike,
      underlying: YieldNotionalLever.IlkInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveJoin(
      joinAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    giver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ilkInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invest(
      ilkId: BytesLike,
      seriesId: BytesLike,
      baseAmount: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIlkInfo(
      ilkId: BytesLike,
      underlying: YieldNotionalLever.IlkInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
