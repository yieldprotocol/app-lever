/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface YieldStrategyLeverInterface extends utils.Interface {
  functions: {
    "CAULDRON()": FunctionFragment;
    "FLASH_LOAN_RETURN()": FunctionFragment;
    "LADLE()": FunctionFragment;
    "divest(uint8,bytes12,bytes6,bytes6,uint256,uint256,uint256)": FunctionFragment;
    "giver()": FunctionFragment;
    "invest(uint8,bytes6,bytes6,uint256,uint256,uint256,uint256)": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CAULDRON"
      | "FLASH_LOAN_RETURN"
      | "LADLE"
      | "divest"
      | "giver"
      | "invest"
      | "onFlashLoan"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CAULDRON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FLASH_LOAN_RETURN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LADLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "divest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "giver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "CAULDRON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FLASH_LOAN_RETURN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LADLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "giver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;

  events: {
    "Divested(uint8,bytes12,bytes6,address,uint256,uint256)": EventFragment;
    "Invested(bytes12,bytes6,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Divested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invested"): EventFragment;
}

export interface DivestedEventObject {
  operation: number;
  vaultId: string;
  seriesId: string;
  investor: string;
  profit: BigNumber;
  debt: BigNumber;
}
export type DivestedEvent = TypedEvent<
  [number, string, string, string, BigNumber, BigNumber],
  DivestedEventObject
>;

export type DivestedEventFilter = TypedEventFilter<DivestedEvent>;

export interface InvestedEventObject {
  vaultId: string;
  seriesId: string;
  investor: string;
  investment: BigNumber;
  debt: BigNumber;
}
export type InvestedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  InvestedEventObject
>;

export type InvestedEventFilter = TypedEventFilter<InvestedEvent>;

export interface YieldStrategyLever extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldStrategyLeverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAULDRON(overrides?: CallOverrides): Promise<[string]>;

    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<[string]>;

    LADLE(overrides?: CallOverrides): Promise<[string]>;

    divest(
      operation: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      minBaseOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    giver(overrides?: CallOverrides): Promise<[string]>;

    invest(
      operation: PromiseOrValue<BigNumberish>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CAULDRON(overrides?: CallOverrides): Promise<string>;

  FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<string>;

  LADLE(overrides?: CallOverrides): Promise<string>;

  divest(
    operation: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BytesLike>,
    seriesId: PromiseOrValue<BytesLike>,
    strategyId: PromiseOrValue<BytesLike>,
    ink: PromiseOrValue<BigNumberish>,
    art: PromiseOrValue<BigNumberish>,
    minBaseOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  giver(overrides?: CallOverrides): Promise<string>;

  invest(
    operation: PromiseOrValue<BigNumberish>,
    seriesId: PromiseOrValue<BytesLike>,
    strategyId: PromiseOrValue<BytesLike>,
    amountToInvest: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    fyTokenToBuy: PromiseOrValue<BigNumberish>,
    minCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onFlashLoan(
    initiator: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAULDRON(overrides?: CallOverrides): Promise<string>;

    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<string>;

    LADLE(overrides?: CallOverrides): Promise<string>;

    divest(
      operation: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      minBaseOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    giver(overrides?: CallOverrides): Promise<string>;

    invest(
      operation: PromiseOrValue<BigNumberish>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minCollateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Divested(uint8,bytes12,bytes6,address,uint256,uint256)"(
      operation?: PromiseOrValue<BigNumberish> | null,
      vaultId?: PromiseOrValue<BytesLike> | null,
      seriesId?: null,
      investor?: PromiseOrValue<string> | null,
      profit?: null,
      debt?: null
    ): DivestedEventFilter;
    Divested(
      operation?: PromiseOrValue<BigNumberish> | null,
      vaultId?: PromiseOrValue<BytesLike> | null,
      seriesId?: null,
      investor?: PromiseOrValue<string> | null,
      profit?: null,
      debt?: null
    ): DivestedEventFilter;

    "Invested(bytes12,bytes6,address,uint256,uint256)"(
      vaultId?: PromiseOrValue<BytesLike> | null,
      seriesId?: null,
      investor?: PromiseOrValue<string> | null,
      investment?: null,
      debt?: null
    ): InvestedEventFilter;
    Invested(
      vaultId?: PromiseOrValue<BytesLike> | null,
      seriesId?: null,
      investor?: PromiseOrValue<string> | null,
      investment?: null,
      debt?: null
    ): InvestedEventFilter;
  };

  estimateGas: {
    CAULDRON(overrides?: CallOverrides): Promise<BigNumber>;

    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<BigNumber>;

    LADLE(overrides?: CallOverrides): Promise<BigNumber>;

    divest(
      operation: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      minBaseOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    giver(overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      operation: PromiseOrValue<BigNumberish>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAULDRON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LADLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divest(
      operation: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      minBaseOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    giver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invest(
      operation: PromiseOrValue<BigNumberish>,
      seriesId: PromiseOrValue<BytesLike>,
      strategyId: PromiseOrValue<BytesLike>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
