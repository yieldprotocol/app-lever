/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StEthLeverInterface extends utils.Interface {
  contractName: "StEthLever";
  functions: {
    "FLASH_LOAN_RETURN()": FunctionFragment;
    "approveFyToken(bytes6)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "divest(bytes12,bytes6,uint128,uint128,uint256)": FunctionFragment;
    "giver()": FunctionFragment;
    "ilkId()": FunctionFragment;
    "invest(bytes6,uint128,uint128)": FunctionFragment;
    "ladle()": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
    "stableSwap()": FunctionFragment;
    "steth()": FunctionFragment;
    "weth()": FunctionFragment;
    "wethJoin()": FunctionFragment;
    "wsteth()": FunctionFragment;
    "wstethJoin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FLASH_LOAN_RETURN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveFyToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "divest",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "giver", values?: undefined): string;
  encodeFunctionData(functionFragment: "ilkId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stableSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "steth", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "wethJoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "wsteth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wstethJoin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FLASH_LOAN_RETURN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveFyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "giver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilkId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stableSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wethJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wsteth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wstethJoin", data: BytesLike): Result;

  events: {};
}

export interface StEthLever extends BaseContract {
  contractName: "StEthLever";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StEthLeverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<[string]>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    divest(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minWeth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    giver(overrides?: CallOverrides): Promise<[string]>;

    ilkId(overrides?: CallOverrides): Promise<[string]>;

    invest(
      seriesId: BytesLike,
      borrowAmount: BigNumberish,
      minCollateral: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableSwap(overrides?: CallOverrides): Promise<[string]>;

    steth(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wethJoin(overrides?: CallOverrides): Promise<[string]>;

    wsteth(overrides?: CallOverrides): Promise<[string]>;

    wstethJoin(overrides?: CallOverrides): Promise<[string]>;
  };

  FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<string>;

  approveFyToken(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  divest(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    minWeth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  giver(overrides?: CallOverrides): Promise<string>;

  ilkId(overrides?: CallOverrides): Promise<string>;

  invest(
    seriesId: BytesLike,
    borrowAmount: BigNumberish,
    minCollateral: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ladle(overrides?: CallOverrides): Promise<string>;

  onFlashLoan(
    initiator: string,
    arg1: string,
    borrowAmount: BigNumberish,
    fee: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableSwap(overrides?: CallOverrides): Promise<string>;

  steth(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  wethJoin(overrides?: CallOverrides): Promise<string>;

  wsteth(overrides?: CallOverrides): Promise<string>;

  wstethJoin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<string>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    divest(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minWeth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    giver(overrides?: CallOverrides): Promise<string>;

    ilkId(overrides?: CallOverrides): Promise<string>;

    invest(
      seriesId: BytesLike,
      borrowAmount: BigNumberish,
      minCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ladle(overrides?: CallOverrides): Promise<string>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    stableSwap(overrides?: CallOverrides): Promise<string>;

    steth(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    wethJoin(overrides?: CallOverrides): Promise<string>;

    wsteth(overrides?: CallOverrides): Promise<string>;

    wstethJoin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<BigNumber>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    divest(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minWeth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    giver(overrides?: CallOverrides): Promise<BigNumber>;

    ilkId(overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      seriesId: BytesLike,
      borrowAmount: BigNumberish,
      minCollateral: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableSwap(overrides?: CallOverrides): Promise<BigNumber>;

    steth(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wethJoin(overrides?: CallOverrides): Promise<BigNumber>;

    wsteth(overrides?: CallOverrides): Promise<BigNumber>;

    wstethJoin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FLASH_LOAN_RETURN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveFyToken(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divest(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      minWeth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    giver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ilkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invest(
      seriesId: BytesLike,
      borrowAmount: BigNumberish,
      minCollateral: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onFlashLoan(
      initiator: string,
      arg1: string,
      borrowAmount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    steth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wsteth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wstethJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
